name: Pull Request Merge Workflow
on:
  pull_request:
    branches:
      - master
    types: [ closed ]
env:
  CI: true
jobs:
  createReleasePullRequest:
    if: "!contains(join(github.event.pull_request.labels.*.name, ','), 'Release') && github.event.pull_request.merged == true"
    name: 'Create Release Pull Request'
    runs-on: 'ubuntu-latest'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Git Identity
        run: |
          git config --global user.name 'alexm122322'
          git config --global user.email 'alexm122322@gmail.com'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Incremented version
        uses: actions/github-script@v6
        id: incremented-version
        with:
          result-encoding: string
          script: |
            const {default: fs} = await import('fs');
            let content = fs.readFileSync('./pubspec.yaml', {encoding: "utf-8"});
            const currentVersion = /version:[ ]+([^\n]+)/g.exec(content)[1];
            const version = currentVersion.split('.');
            const newVersion = `${version[0]}.${version[1]}.${parseInt(version[2]) + 1}`;
            
            content = content.replace(/version:[ ]+([^\n]+)/g, `version: ${newVersion}`);
            fs.writeFileSync('./pubspec.yaml', content);
            fs.writeFileSync('version.txt', newVersion);
            return newVersion;

      - name: Commit changes
        shell: bash -ex {0}
        run: |
          git add . && git commit -m "chore(release): publish ${{ steps.incremented-version.outputs.result }}"

      - name: Get Pull Request Description
        id: get_description
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash -ex {0}
        run: |
          pr_metadata=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
           -H "Accept: application/vnd.github+json" \
           "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}")

          # Extract the description (body field)
          DESCRIPTION=$(echo "$pr_metadata" | jq -r '.body')

          if [ "$DESCRIPTION" != "null" ]; then
            echo "Pull Request Description: $DESCRIPTION"
          else
            echo "No description provided in the pull request. The 'release/next' branch must provide a description for the correct generation of the 'CHANGELOG.md' file."
            exit 1
          fi
          
          echo "::set-output name=DESCRIPTION::${DESCRIPTION}"

      - name: Get Pull Request Description
        id: get_current_description
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash -ex {0}
        run: |
          TARGET_LABEL="Type: Release"
          
          PRS=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/pulls?state=open" | jq -r ".[] | select(.labels[].name == \"$TARGET_LABEL\") | .number")

          if [ -z "$PRS" ]; then
            echo "No PR found with label '$TARGET_LABEL'"
            DESCRIPTION=""
            echo "::set-output name=DESCRIPTION::${DESCRIPTION}"
            exit 0
          fi

          # Use the first PR that matches the label
          TARGET_PR_NUMBER=$(echo "$PRS" | head -n 1)
          
          pr_metadata=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
           -H "Accept: application/vnd.github+json" \
           "https://api.github.com/repos/${{ github.repository }}/pulls/$TARGET_PR_NUMBER")

          # Extract the description (body field)
          DESCRIPTION=$(echo "$pr_metadata" | jq -r '.body')
          echo "::set-output name=DESCRIPTION::${DESCRIPTION}"

      - name: Create Full Description
        id: full_description
        shell: bash -ex {0}
        run: |
          curr_desc="${{ steps.get_current_description.outputs.DESCRIPTION }}"
          pr_desc="${{ steps.get_description.outputs.DESCRIPTION }}"
          if [  "$curr_desc" == "" ]; then
             printf -v desc "## v${{ steps.incremented-version.outputs.result }}\n$pr_desc"
          else
             printf -v desc "$curr_desc\n$pr_desc"
          fi
          
          echo "DESCRIPTION<<EOF" >> $GITHUB_OUTPUT
          echo $desc >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Debug Description
        run: echo ${{ steps.full_description.outputs.DESCRIPTION }}

      - name: Create Release Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v3.5.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          path: ${{ secrets.GITHUB_WORKSPACE }}
          commit-message: "Update v${{ steps.incremented-version.outputs.result }}"
          committer: GitHub <noreply@github.com>
          author: "${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>"
          title: 'v${{ steps.incremented-version.outputs.result }}'
          body: |
            ${{ steps.full_description.outputs.DESCRIPTION }}

          labels: "Type: Release"
          branch: "release/next"


